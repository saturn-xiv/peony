// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: nut.proto

#include "nut.pb.h"
#include "nut.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>

static const char* NutService_method_names[] = {
  "/NutService/SignIn",
  "/NutService/SignUp",
};

std::unique_ptr< NutService::Stub> NutService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< NutService::Stub> stub(new NutService::Stub(channel));
  return stub;
}

NutService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_SignIn_(NutService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SignUp_(NutService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status NutService::Stub::SignIn(::grpc::ClientContext* context, const ::SignInRequest& request, ::SignInResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::SignInRequest, ::SignInResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SignIn_, context, request, response);
}

void NutService::Stub::experimental_async::SignIn(::grpc::ClientContext* context, const ::SignInRequest* request, ::SignInResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::SignInRequest, ::SignInResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SignIn_, context, request, response, std::move(f));
}

void NutService::Stub::experimental_async::SignIn(::grpc::ClientContext* context, const ::SignInRequest* request, ::SignInResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SignIn_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::SignInResponse>* NutService::Stub::PrepareAsyncSignInRaw(::grpc::ClientContext* context, const ::SignInRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::SignInResponse, ::SignInRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SignIn_, context, request);
}

::grpc::ClientAsyncResponseReader< ::SignInResponse>* NutService::Stub::AsyncSignInRaw(::grpc::ClientContext* context, const ::SignInRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSignInRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NutService::Stub::SignUp(::grpc::ClientContext* context, const ::SignUpRequest& request, ::Ok* response) {
  return ::grpc::internal::BlockingUnaryCall< ::SignUpRequest, ::Ok, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SignUp_, context, request, response);
}

void NutService::Stub::experimental_async::SignUp(::grpc::ClientContext* context, const ::SignUpRequest* request, ::Ok* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::SignUpRequest, ::Ok, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SignUp_, context, request, response, std::move(f));
}

void NutService::Stub::experimental_async::SignUp(::grpc::ClientContext* context, const ::SignUpRequest* request, ::Ok* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SignUp_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Ok>* NutService::Stub::PrepareAsyncSignUpRaw(::grpc::ClientContext* context, const ::SignUpRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Ok, ::SignUpRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SignUp_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Ok>* NutService::Stub::AsyncSignUpRaw(::grpc::ClientContext* context, const ::SignUpRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSignUpRaw(context, request, cq);
  result->StartCall();
  return result;
}

NutService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NutService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NutService::Service, ::SignInRequest, ::SignInResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NutService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::SignInRequest* req,
             ::SignInResponse* resp) {
               return service->SignIn(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NutService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NutService::Service, ::SignUpRequest, ::Ok, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NutService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::SignUpRequest* req,
             ::Ok* resp) {
               return service->SignUp(ctx, req, resp);
             }, this)));
}

NutService::Service::~Service() {
}

::grpc::Status NutService::Service::SignIn(::grpc::ServerContext* context, const ::SignInRequest* request, ::SignInResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NutService::Service::SignUp(::grpc::ServerContext* context, const ::SignUpRequest* request, ::Ok* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


