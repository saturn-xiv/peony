// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `protos/auth.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
pub struct ImportRequest {
    // message fields
    pub uid: ::std::string::String,
    pub real_name: ::std::string::String,
    pub nickname: ::std::string::String,
    pub email: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ImportRequest {
    fn default() -> &'a ImportRequest {
        <ImportRequest as ::protobuf::Message>::default_instance()
    }
}

impl ImportRequest {
    pub fn new() -> ImportRequest {
        ::std::default::Default::default()
    }

    // string uid = 1;


    pub fn get_uid(&self) -> &str {
        &self.uid
    }
    pub fn clear_uid(&mut self) {
        self.uid.clear();
    }

    // Param is passed by value, moved
    pub fn set_uid(&mut self, v: ::std::string::String) {
        self.uid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_uid(&mut self) -> &mut ::std::string::String {
        &mut self.uid
    }

    // Take field
    pub fn take_uid(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.uid, ::std::string::String::new())
    }

    // string real_name = 2;


    pub fn get_real_name(&self) -> &str {
        &self.real_name
    }
    pub fn clear_real_name(&mut self) {
        self.real_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_real_name(&mut self, v: ::std::string::String) {
        self.real_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_real_name(&mut self) -> &mut ::std::string::String {
        &mut self.real_name
    }

    // Take field
    pub fn take_real_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.real_name, ::std::string::String::new())
    }

    // string nickname = 3;


    pub fn get_nickname(&self) -> &str {
        &self.nickname
    }
    pub fn clear_nickname(&mut self) {
        self.nickname.clear();
    }

    // Param is passed by value, moved
    pub fn set_nickname(&mut self, v: ::std::string::String) {
        self.nickname = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_nickname(&mut self) -> &mut ::std::string::String {
        &mut self.nickname
    }

    // Take field
    pub fn take_nickname(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.nickname, ::std::string::String::new())
    }

    // string email = 4;


    pub fn get_email(&self) -> &str {
        &self.email
    }
    pub fn clear_email(&mut self) {
        self.email.clear();
    }

    // Param is passed by value, moved
    pub fn set_email(&mut self, v: ::std::string::String) {
        self.email = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_email(&mut self) -> &mut ::std::string::String {
        &mut self.email
    }

    // Take field
    pub fn take_email(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.email, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ImportRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.uid)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.real_name)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.nickname)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.email)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.uid.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.uid);
        }
        if !self.real_name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.real_name);
        }
        if !self.nickname.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.nickname);
        }
        if !self.email.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.email);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.uid.is_empty() {
            os.write_string(1, &self.uid)?;
        }
        if !self.real_name.is_empty() {
            os.write_string(2, &self.real_name)?;
        }
        if !self.nickname.is_empty() {
            os.write_string(3, &self.nickname)?;
        }
        if !self.email.is_empty() {
            os.write_string(4, &self.email)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ImportRequest {
        ImportRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "uid",
                |m: &ImportRequest| { &m.uid },
                |m: &mut ImportRequest| { &mut m.uid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "real_name",
                |m: &ImportRequest| { &m.real_name },
                |m: &mut ImportRequest| { &mut m.real_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "nickname",
                |m: &ImportRequest| { &m.nickname },
                |m: &mut ImportRequest| { &mut m.nickname },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "email",
                |m: &ImportRequest| { &m.email },
                |m: &mut ImportRequest| { &mut m.email },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ImportRequest>(
                "ImportRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ImportRequest {
        static instance: ::protobuf::rt::LazyV2<ImportRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ImportRequest::new)
    }
}

impl ::protobuf::Clear for ImportRequest {
    fn clear(&mut self) {
        self.uid.clear();
        self.real_name.clear();
        self.nickname.clear();
        self.email.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ImportRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ImportRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EmailRequest {
    // message fields
    pub email: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EmailRequest {
    fn default() -> &'a EmailRequest {
        <EmailRequest as ::protobuf::Message>::default_instance()
    }
}

impl EmailRequest {
    pub fn new() -> EmailRequest {
        ::std::default::Default::default()
    }

    // string email = 1;


    pub fn get_email(&self) -> &str {
        &self.email
    }
    pub fn clear_email(&mut self) {
        self.email.clear();
    }

    // Param is passed by value, moved
    pub fn set_email(&mut self, v: ::std::string::String) {
        self.email = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_email(&mut self) -> &mut ::std::string::String {
        &mut self.email
    }

    // Take field
    pub fn take_email(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.email, ::std::string::String::new())
    }
}

impl ::protobuf::Message for EmailRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.email)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.email.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.email);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.email.is_empty() {
            os.write_string(1, &self.email)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EmailRequest {
        EmailRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "email",
                |m: &EmailRequest| { &m.email },
                |m: &mut EmailRequest| { &mut m.email },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<EmailRequest>(
                "EmailRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static EmailRequest {
        static instance: ::protobuf::rt::LazyV2<EmailRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EmailRequest::new)
    }
}

impl ::protobuf::Clear for EmailRequest {
    fn clear(&mut self) {
        self.email.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EmailRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EmailRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SignInRequest {
    // message fields
    pub login: ::std::string::String,
    pub password: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SignInRequest {
    fn default() -> &'a SignInRequest {
        <SignInRequest as ::protobuf::Message>::default_instance()
    }
}

impl SignInRequest {
    pub fn new() -> SignInRequest {
        ::std::default::Default::default()
    }

    // string login = 1;


    pub fn get_login(&self) -> &str {
        &self.login
    }
    pub fn clear_login(&mut self) {
        self.login.clear();
    }

    // Param is passed by value, moved
    pub fn set_login(&mut self, v: ::std::string::String) {
        self.login = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_login(&mut self) -> &mut ::std::string::String {
        &mut self.login
    }

    // Take field
    pub fn take_login(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.login, ::std::string::String::new())
    }

    // string password = 2;


    pub fn get_password(&self) -> &str {
        &self.password
    }
    pub fn clear_password(&mut self) {
        self.password.clear();
    }

    // Param is passed by value, moved
    pub fn set_password(&mut self, v: ::std::string::String) {
        self.password = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_password(&mut self) -> &mut ::std::string::String {
        &mut self.password
    }

    // Take field
    pub fn take_password(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.password, ::std::string::String::new())
    }
}

impl ::protobuf::Message for SignInRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.login)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.password)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.login.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.login);
        }
        if !self.password.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.password);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.login.is_empty() {
            os.write_string(1, &self.login)?;
        }
        if !self.password.is_empty() {
            os.write_string(2, &self.password)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SignInRequest {
        SignInRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "login",
                |m: &SignInRequest| { &m.login },
                |m: &mut SignInRequest| { &mut m.login },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "password",
                |m: &SignInRequest| { &m.password },
                |m: &mut SignInRequest| { &mut m.password },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SignInRequest>(
                "SignInRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SignInRequest {
        static instance: ::protobuf::rt::LazyV2<SignInRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SignInRequest::new)
    }
}

impl ::protobuf::Clear for SignInRequest {
    fn clear(&mut self) {
        self.login.clear();
        self.password.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SignInRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SignInRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SignInResponse {
    // message fields
    pub token: ::std::string::String,
    pub roles: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SignInResponse {
    fn default() -> &'a SignInResponse {
        <SignInResponse as ::protobuf::Message>::default_instance()
    }
}

impl SignInResponse {
    pub fn new() -> SignInResponse {
        ::std::default::Default::default()
    }

    // string token = 1;


    pub fn get_token(&self) -> &str {
        &self.token
    }
    pub fn clear_token(&mut self) {
        self.token.clear();
    }

    // Param is passed by value, moved
    pub fn set_token(&mut self, v: ::std::string::String) {
        self.token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_token(&mut self) -> &mut ::std::string::String {
        &mut self.token
    }

    // Take field
    pub fn take_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.token, ::std::string::String::new())
    }

    // repeated string roles = 2;


    pub fn get_roles(&self) -> &[::std::string::String] {
        &self.roles
    }
    pub fn clear_roles(&mut self) {
        self.roles.clear();
    }

    // Param is passed by value, moved
    pub fn set_roles(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.roles = v;
    }

    // Mutable pointer to the field.
    pub fn mut_roles(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.roles
    }

    // Take field
    pub fn take_roles(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.roles, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for SignInResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.token)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.roles)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.token.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.token);
        }
        for value in &self.roles {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.token.is_empty() {
            os.write_string(1, &self.token)?;
        }
        for v in &self.roles {
            os.write_string(2, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SignInResponse {
        SignInResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "token",
                |m: &SignInResponse| { &m.token },
                |m: &mut SignInResponse| { &mut m.token },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "roles",
                |m: &SignInResponse| { &m.roles },
                |m: &mut SignInResponse| { &mut m.roles },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SignInResponse>(
                "SignInResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SignInResponse {
        static instance: ::protobuf::rt::LazyV2<SignInResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SignInResponse::new)
    }
}

impl ::protobuf::Clear for SignInResponse {
    fn clear(&mut self) {
        self.token.clear();
        self.roles.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SignInResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SignInResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SignUpRequest {
    // message fields
    pub real_name: ::std::string::String,
    pub nickname: ::std::string::String,
    pub email: ::std::string::String,
    pub password: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SignUpRequest {
    fn default() -> &'a SignUpRequest {
        <SignUpRequest as ::protobuf::Message>::default_instance()
    }
}

impl SignUpRequest {
    pub fn new() -> SignUpRequest {
        ::std::default::Default::default()
    }

    // string real_name = 1;


    pub fn get_real_name(&self) -> &str {
        &self.real_name
    }
    pub fn clear_real_name(&mut self) {
        self.real_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_real_name(&mut self, v: ::std::string::String) {
        self.real_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_real_name(&mut self) -> &mut ::std::string::String {
        &mut self.real_name
    }

    // Take field
    pub fn take_real_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.real_name, ::std::string::String::new())
    }

    // string nickname = 2;


    pub fn get_nickname(&self) -> &str {
        &self.nickname
    }
    pub fn clear_nickname(&mut self) {
        self.nickname.clear();
    }

    // Param is passed by value, moved
    pub fn set_nickname(&mut self, v: ::std::string::String) {
        self.nickname = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_nickname(&mut self) -> &mut ::std::string::String {
        &mut self.nickname
    }

    // Take field
    pub fn take_nickname(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.nickname, ::std::string::String::new())
    }

    // string email = 3;


    pub fn get_email(&self) -> &str {
        &self.email
    }
    pub fn clear_email(&mut self) {
        self.email.clear();
    }

    // Param is passed by value, moved
    pub fn set_email(&mut self, v: ::std::string::String) {
        self.email = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_email(&mut self) -> &mut ::std::string::String {
        &mut self.email
    }

    // Take field
    pub fn take_email(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.email, ::std::string::String::new())
    }

    // string password = 4;


    pub fn get_password(&self) -> &str {
        &self.password
    }
    pub fn clear_password(&mut self) {
        self.password.clear();
    }

    // Param is passed by value, moved
    pub fn set_password(&mut self, v: ::std::string::String) {
        self.password = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_password(&mut self) -> &mut ::std::string::String {
        &mut self.password
    }

    // Take field
    pub fn take_password(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.password, ::std::string::String::new())
    }
}

impl ::protobuf::Message for SignUpRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.real_name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.nickname)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.email)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.password)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.real_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.real_name);
        }
        if !self.nickname.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.nickname);
        }
        if !self.email.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.email);
        }
        if !self.password.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.password);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.real_name.is_empty() {
            os.write_string(1, &self.real_name)?;
        }
        if !self.nickname.is_empty() {
            os.write_string(2, &self.nickname)?;
        }
        if !self.email.is_empty() {
            os.write_string(3, &self.email)?;
        }
        if !self.password.is_empty() {
            os.write_string(4, &self.password)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SignUpRequest {
        SignUpRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "real_name",
                |m: &SignUpRequest| { &m.real_name },
                |m: &mut SignUpRequest| { &mut m.real_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "nickname",
                |m: &SignUpRequest| { &m.nickname },
                |m: &mut SignUpRequest| { &mut m.nickname },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "email",
                |m: &SignUpRequest| { &m.email },
                |m: &mut SignUpRequest| { &mut m.email },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "password",
                |m: &SignUpRequest| { &m.password },
                |m: &mut SignUpRequest| { &mut m.password },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SignUpRequest>(
                "SignUpRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SignUpRequest {
        static instance: ::protobuf::rt::LazyV2<SignUpRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SignUpRequest::new)
    }
}

impl ::protobuf::Clear for SignUpRequest {
    fn clear(&mut self) {
        self.real_name.clear();
        self.nickname.clear();
        self.email.clear();
        self.password.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SignUpRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SignUpRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ResetPasswordRequest {
    // message fields
    pub token: ::std::string::String,
    pub password: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ResetPasswordRequest {
    fn default() -> &'a ResetPasswordRequest {
        <ResetPasswordRequest as ::protobuf::Message>::default_instance()
    }
}

impl ResetPasswordRequest {
    pub fn new() -> ResetPasswordRequest {
        ::std::default::Default::default()
    }

    // string token = 1;


    pub fn get_token(&self) -> &str {
        &self.token
    }
    pub fn clear_token(&mut self) {
        self.token.clear();
    }

    // Param is passed by value, moved
    pub fn set_token(&mut self, v: ::std::string::String) {
        self.token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_token(&mut self) -> &mut ::std::string::String {
        &mut self.token
    }

    // Take field
    pub fn take_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.token, ::std::string::String::new())
    }

    // string password = 2;


    pub fn get_password(&self) -> &str {
        &self.password
    }
    pub fn clear_password(&mut self) {
        self.password.clear();
    }

    // Param is passed by value, moved
    pub fn set_password(&mut self, v: ::std::string::String) {
        self.password = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_password(&mut self) -> &mut ::std::string::String {
        &mut self.password
    }

    // Take field
    pub fn take_password(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.password, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ResetPasswordRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.token)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.password)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.token.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.token);
        }
        if !self.password.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.password);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.token.is_empty() {
            os.write_string(1, &self.token)?;
        }
        if !self.password.is_empty() {
            os.write_string(2, &self.password)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ResetPasswordRequest {
        ResetPasswordRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "token",
                |m: &ResetPasswordRequest| { &m.token },
                |m: &mut ResetPasswordRequest| { &mut m.token },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "password",
                |m: &ResetPasswordRequest| { &m.password },
                |m: &mut ResetPasswordRequest| { &mut m.password },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ResetPasswordRequest>(
                "ResetPasswordRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ResetPasswordRequest {
        static instance: ::protobuf::rt::LazyV2<ResetPasswordRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ResetPasswordRequest::new)
    }
}

impl ::protobuf::Clear for ResetPasswordRequest {
    fn clear(&mut self) {
        self.token.clear();
        self.password.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ResetPasswordRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ResetPasswordRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EmailTask {
    // message fields
    pub to: ::std::string::String,
    pub cc: ::protobuf::RepeatedField<::std::string::String>,
    pub bcc: ::protobuf::RepeatedField<::std::string::String>,
    pub subject: ::std::string::String,
    pub content_type: ContentType,
    pub body: ::std::string::String,
    pub files: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EmailTask {
    fn default() -> &'a EmailTask {
        <EmailTask as ::protobuf::Message>::default_instance()
    }
}

impl EmailTask {
    pub fn new() -> EmailTask {
        ::std::default::Default::default()
    }

    // string to = 1;


    pub fn get_to(&self) -> &str {
        &self.to
    }
    pub fn clear_to(&mut self) {
        self.to.clear();
    }

    // Param is passed by value, moved
    pub fn set_to(&mut self, v: ::std::string::String) {
        self.to = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_to(&mut self) -> &mut ::std::string::String {
        &mut self.to
    }

    // Take field
    pub fn take_to(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.to, ::std::string::String::new())
    }

    // repeated string cc = 2;


    pub fn get_cc(&self) -> &[::std::string::String] {
        &self.cc
    }
    pub fn clear_cc(&mut self) {
        self.cc.clear();
    }

    // Param is passed by value, moved
    pub fn set_cc(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.cc = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cc(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.cc
    }

    // Take field
    pub fn take_cc(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.cc, ::protobuf::RepeatedField::new())
    }

    // repeated string bcc = 3;


    pub fn get_bcc(&self) -> &[::std::string::String] {
        &self.bcc
    }
    pub fn clear_bcc(&mut self) {
        self.bcc.clear();
    }

    // Param is passed by value, moved
    pub fn set_bcc(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.bcc = v;
    }

    // Mutable pointer to the field.
    pub fn mut_bcc(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.bcc
    }

    // Take field
    pub fn take_bcc(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.bcc, ::protobuf::RepeatedField::new())
    }

    // string subject = 4;


    pub fn get_subject(&self) -> &str {
        &self.subject
    }
    pub fn clear_subject(&mut self) {
        self.subject.clear();
    }

    // Param is passed by value, moved
    pub fn set_subject(&mut self, v: ::std::string::String) {
        self.subject = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_subject(&mut self) -> &mut ::std::string::String {
        &mut self.subject
    }

    // Take field
    pub fn take_subject(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.subject, ::std::string::String::new())
    }

    // .peony.auth.ContentType content_type = 5;


    pub fn get_content_type(&self) -> ContentType {
        self.content_type
    }
    pub fn clear_content_type(&mut self) {
        self.content_type = ContentType::PLAIN;
    }

    // Param is passed by value, moved
    pub fn set_content_type(&mut self, v: ContentType) {
        self.content_type = v;
    }

    // string body = 6;


    pub fn get_body(&self) -> &str {
        &self.body
    }
    pub fn clear_body(&mut self) {
        self.body.clear();
    }

    // Param is passed by value, moved
    pub fn set_body(&mut self, v: ::std::string::String) {
        self.body = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_body(&mut self) -> &mut ::std::string::String {
        &mut self.body
    }

    // Take field
    pub fn take_body(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.body, ::std::string::String::new())
    }

    // repeated string files = 7;


    pub fn get_files(&self) -> &[::std::string::String] {
        &self.files
    }
    pub fn clear_files(&mut self) {
        self.files.clear();
    }

    // Param is passed by value, moved
    pub fn set_files(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.files = v;
    }

    // Mutable pointer to the field.
    pub fn mut_files(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.files
    }

    // Take field
    pub fn take_files(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.files, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for EmailTask {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.to)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.cc)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.bcc)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.subject)?;
                },
                5 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.content_type, 5, &mut self.unknown_fields)?
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.body)?;
                },
                7 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.files)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.to.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.to);
        }
        for value in &self.cc {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        for value in &self.bcc {
            my_size += ::protobuf::rt::string_size(3, &value);
        };
        if !self.subject.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.subject);
        }
        if self.content_type != ContentType::PLAIN {
            my_size += ::protobuf::rt::enum_size(5, self.content_type);
        }
        if !self.body.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.body);
        }
        for value in &self.files {
            my_size += ::protobuf::rt::string_size(7, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.to.is_empty() {
            os.write_string(1, &self.to)?;
        }
        for v in &self.cc {
            os.write_string(2, &v)?;
        };
        for v in &self.bcc {
            os.write_string(3, &v)?;
        };
        if !self.subject.is_empty() {
            os.write_string(4, &self.subject)?;
        }
        if self.content_type != ContentType::PLAIN {
            os.write_enum(5, ::protobuf::ProtobufEnum::value(&self.content_type))?;
        }
        if !self.body.is_empty() {
            os.write_string(6, &self.body)?;
        }
        for v in &self.files {
            os.write_string(7, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EmailTask {
        EmailTask::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "to",
                |m: &EmailTask| { &m.to },
                |m: &mut EmailTask| { &mut m.to },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cc",
                |m: &EmailTask| { &m.cc },
                |m: &mut EmailTask| { &mut m.cc },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "bcc",
                |m: &EmailTask| { &m.bcc },
                |m: &mut EmailTask| { &mut m.bcc },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "subject",
                |m: &EmailTask| { &m.subject },
                |m: &mut EmailTask| { &mut m.subject },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ContentType>>(
                "content_type",
                |m: &EmailTask| { &m.content_type },
                |m: &mut EmailTask| { &mut m.content_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "body",
                |m: &EmailTask| { &m.body },
                |m: &mut EmailTask| { &mut m.body },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "files",
                |m: &EmailTask| { &m.files },
                |m: &mut EmailTask| { &mut m.files },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<EmailTask>(
                "EmailTask",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static EmailTask {
        static instance: ::protobuf::rt::LazyV2<EmailTask> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EmailTask::new)
    }
}

impl ::protobuf::Clear for EmailTask {
    fn clear(&mut self) {
        self.to.clear();
        self.cc.clear();
        self.bcc.clear();
        self.subject.clear();
        self.content_type = ContentType::PLAIN;
        self.body.clear();
        self.files.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EmailTask {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EmailTask {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ContentType {
    PLAIN = 0,
    HTML = 1,
    MARKDOWN = 3,
    JSON = 4,
    XML = 5,
    PROTOBUF = 6,
}

impl ::protobuf::ProtobufEnum for ContentType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ContentType> {
        match value {
            0 => ::std::option::Option::Some(ContentType::PLAIN),
            1 => ::std::option::Option::Some(ContentType::HTML),
            3 => ::std::option::Option::Some(ContentType::MARKDOWN),
            4 => ::std::option::Option::Some(ContentType::JSON),
            5 => ::std::option::Option::Some(ContentType::XML),
            6 => ::std::option::Option::Some(ContentType::PROTOBUF),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ContentType] = &[
            ContentType::PLAIN,
            ContentType::HTML,
            ContentType::MARKDOWN,
            ContentType::JSON,
            ContentType::XML,
            ContentType::PROTOBUF,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ContentType>("ContentType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ContentType {
}

impl ::std::default::Default for ContentType {
    fn default() -> Self {
        ContentType::PLAIN
    }
}

impl ::protobuf::reflect::ProtobufValue for ContentType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11protos/auth.proto\x12\npeony.auth\x1a\x1bgoogle/protobuf/empty.pro\
    to\"p\n\rImportRequest\x12\x10\n\x03uid\x18\x01\x20\x01(\tR\x03uid\x12\
    \x1b\n\treal_name\x18\x02\x20\x01(\tR\x08realName\x12\x1a\n\x08nickname\
    \x18\x03\x20\x01(\tR\x08nickname\x12\x14\n\x05email\x18\x04\x20\x01(\tR\
    \x05email\"$\n\x0cEmailRequest\x12\x14\n\x05email\x18\x01\x20\x01(\tR\
    \x05email\"A\n\rSignInRequest\x12\x14\n\x05login\x18\x01\x20\x01(\tR\x05\
    login\x12\x1a\n\x08password\x18\x02\x20\x01(\tR\x08password\"<\n\x0eSign\
    InResponse\x12\x14\n\x05token\x18\x01\x20\x01(\tR\x05token\x12\x14\n\x05\
    roles\x18\x02\x20\x03(\tR\x05roles\"z\n\rSignUpRequest\x12\x1b\n\treal_n\
    ame\x18\x01\x20\x01(\tR\x08realName\x12\x1a\n\x08nickname\x18\x02\x20\
    \x01(\tR\x08nickname\x12\x14\n\x05email\x18\x03\x20\x01(\tR\x05email\x12\
    \x1a\n\x08password\x18\x04\x20\x01(\tR\x08password\"H\n\x14ResetPassword\
    Request\x12\x14\n\x05token\x18\x01\x20\x01(\tR\x05token\x12\x1a\n\x08pas\
    sword\x18\x02\x20\x01(\tR\x08password\"\xbd\x01\n\tEmailTask\x12\x0e\n\
    \x02to\x18\x01\x20\x01(\tR\x02to\x12\x0e\n\x02cc\x18\x02\x20\x03(\tR\x02\
    cc\x12\x10\n\x03bcc\x18\x03\x20\x03(\tR\x03bcc\x12\x18\n\x07subject\x18\
    \x04\x20\x01(\tR\x07subject\x12:\n\x0ccontent_type\x18\x05\x20\x01(\x0e2\
    \x17.peony.auth.ContentTypeR\x0bcontentType\x12\x12\n\x04body\x18\x06\
    \x20\x01(\tR\x04body\x12\x14\n\x05files\x18\x07\x20\x03(\tR\x05files*Q\n\
    \x0bContentType\x12\t\n\x05PLAIN\x10\0\x12\x08\n\x04HTML\x10\x01\x12\x0c\
    \n\x08MARKDOWN\x10\x03\x12\x08\n\x04JSON\x10\x04\x12\x07\n\x03XML\x10\
    \x05\x12\x0c\n\x08PROTOBUF\x10\x062\xde\x03\n\x0bUserService\x12=\n\x06I\
    mport\x12\x19.peony.auth.ImportRequest\x1a\x16.google.protobuf.Empty\"\0\
    \x12A\n\x06SignIn\x12\x19.peony.auth.SignInRequest\x1a\x1a.peony.auth.Si\
    gnInResponse\"\0\x12=\n\x06SignUp\x12\x19.peony.auth.SignUpRequest\x1a\
    \x16.google.protobuf.Empty\"\0\x12=\n\x07Confirm\x12\x18.peony.auth.Emai\
    lRequest\x1a\x16.google.protobuf.Empty\"\0\x12<\n\x06Unlock\x12\x18.peon\
    y.auth.EmailRequest\x1a\x16.google.protobuf.Empty\"\0\x12D\n\x0eForgotPa\
    ssword\x12\x18.peony.auth.EmailRequest\x1a\x16.google.protobuf.Empty\"\0\
    \x12K\n\rResetPassword\x12\x20.peony.auth.ResetPasswordRequest\x1a\x16.g\
    oogle.protobuf.Empty\"\0J\xe7\x10\n\x06\x12\x04\0\0@\x01\n\x08\n\x01\x0c\
    \x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\0\x13\n\t\n\x02\x03\0\x12\
    \x03\x04\0%\n\n\n\x02\x06\0\x12\x04\x06\0\x0e\x01\n\n\n\x03\x06\0\x01\
    \x12\x03\x06\x08\x13\n\x0b\n\x04\x06\0\x02\0\x12\x03\x07\x02>\n\x0c\n\
    \x05\x06\0\x02\0\x01\x12\x03\x07\x06\x0c\n\x0c\n\x05\x06\0\x02\0\x02\x12\
    \x03\x07\r\x1a\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\x07%:\n\x0b\n\x04\x06\
    \0\x02\x01\x12\x03\x08\x027\n\x0c\n\x05\x06\0\x02\x01\x01\x12\x03\x08\
    \x06\x0c\n\x0c\n\x05\x06\0\x02\x01\x02\x12\x03\x08\r\x1a\n\x0c\n\x05\x06\
    \0\x02\x01\x03\x12\x03\x08%3\n\x0b\n\x04\x06\0\x02\x02\x12\x03\t\x02>\n\
    \x0c\n\x05\x06\0\x02\x02\x01\x12\x03\t\x06\x0c\n\x0c\n\x05\x06\0\x02\x02\
    \x02\x12\x03\t\r\x1a\n\x0c\n\x05\x06\0\x02\x02\x03\x12\x03\t%:\n\x0b\n\
    \x04\x06\0\x02\x03\x12\x03\n\x02>\n\x0c\n\x05\x06\0\x02\x03\x01\x12\x03\
    \n\x06\r\n\x0c\n\x05\x06\0\x02\x03\x02\x12\x03\n\x0e\x1a\n\x0c\n\x05\x06\
    \0\x02\x03\x03\x12\x03\n%:\n\x0b\n\x04\x06\0\x02\x04\x12\x03\x0b\x02=\n\
    \x0c\n\x05\x06\0\x02\x04\x01\x12\x03\x0b\x06\x0c\n\x0c\n\x05\x06\0\x02\
    \x04\x02\x12\x03\x0b\r\x19\n\x0c\n\x05\x06\0\x02\x04\x03\x12\x03\x0b$9\n\
    \x0b\n\x04\x06\0\x02\x05\x12\x03\x0c\x02E\n\x0c\n\x05\x06\0\x02\x05\x01\
    \x12\x03\x0c\x06\x14\n\x0c\n\x05\x06\0\x02\x05\x02\x12\x03\x0c\x15!\n\
    \x0c\n\x05\x06\0\x02\x05\x03\x12\x03\x0c,A\n\x0b\n\x04\x06\0\x02\x06\x12\
    \x03\r\x02L\n\x0c\n\x05\x06\0\x02\x06\x01\x12\x03\r\x06\x13\n\x0c\n\x05\
    \x06\0\x02\x06\x02\x12\x03\r\x14(\n\x0c\n\x05\x06\0\x02\x06\x03\x12\x03\
    \r3H\n\n\n\x02\x05\0\x12\x04\x10\0\x17\x01\n\n\n\x03\x05\0\x01\x12\x03\
    \x10\x05\x10\n\x0b\n\x04\x05\0\x02\0\x12\x03\x11\x02\x0c\n\x0c\n\x05\x05\
    \0\x02\0\x01\x12\x03\x11\x02\x07\n\x0c\n\x05\x05\0\x02\0\x02\x12\x03\x11\
    \n\x0b\n\x0b\n\x04\x05\0\x02\x01\x12\x03\x12\x02\x0b\n\x0c\n\x05\x05\0\
    \x02\x01\x01\x12\x03\x12\x02\x06\n\x0c\n\x05\x05\0\x02\x01\x02\x12\x03\
    \x12\t\n\n\x0b\n\x04\x05\0\x02\x02\x12\x03\x13\x02\x0f\n\x0c\n\x05\x05\0\
    \x02\x02\x01\x12\x03\x13\x02\n\n\x0c\n\x05\x05\0\x02\x02\x02\x12\x03\x13\
    \r\x0e\n\x0b\n\x04\x05\0\x02\x03\x12\x03\x14\x02\x0b\n\x0c\n\x05\x05\0\
    \x02\x03\x01\x12\x03\x14\x02\x06\n\x0c\n\x05\x05\0\x02\x03\x02\x12\x03\
    \x14\t\n\n\x0b\n\x04\x05\0\x02\x04\x12\x03\x15\x02\n\n\x0c\n\x05\x05\0\
    \x02\x04\x01\x12\x03\x15\x02\x05\n\x0c\n\x05\x05\0\x02\x04\x02\x12\x03\
    \x15\x08\t\n\x0b\n\x04\x05\0\x02\x05\x12\x03\x16\x02\x0f\n\x0c\n\x05\x05\
    \0\x02\x05\x01\x12\x03\x16\x02\n\n\x0c\n\x05\x05\0\x02\x05\x02\x12\x03\
    \x16\r\x0e\n\n\n\x02\x04\0\x12\x04\x19\0\x1e\x01\n\n\n\x03\x04\0\x01\x12\
    \x03\x19\x08\x15\n\x0b\n\x04\x04\0\x02\0\x12\x03\x1a\x02\x11\n\x0c\n\x05\
    \x04\0\x02\0\x05\x12\x03\x1a\x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\
    \x1a\t\x0c\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x1a\x0f\x10\n\x0b\n\x04\
    \x04\0\x02\x01\x12\x03\x1b\x02\x17\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\
    \x1b\x02\x08\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x1b\t\x12\n\x0c\n\x05\
    \x04\0\x02\x01\x03\x12\x03\x1b\x15\x16\n\x0b\n\x04\x04\0\x02\x02\x12\x03\
    \x1c\x02\x16\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03\x1c\x02\x08\n\x0c\n\
    \x05\x04\0\x02\x02\x01\x12\x03\x1c\t\x11\n\x0c\n\x05\x04\0\x02\x02\x03\
    \x12\x03\x1c\x14\x15\n\x0b\n\x04\x04\0\x02\x03\x12\x03\x1d\x02\x13\n\x0c\
    \n\x05\x04\0\x02\x03\x05\x12\x03\x1d\x02\x08\n\x0c\n\x05\x04\0\x02\x03\
    \x01\x12\x03\x1d\t\x0e\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\x1d\x11\x12\
    \n\t\n\x02\x04\x01\x12\x03\x20\0*\n\n\n\x03\x04\x01\x01\x12\x03\x20\x08\
    \x14\n\x0b\n\x04\x04\x01\x02\0\x12\x03\x20\x17(\n\x0c\n\x05\x04\x01\x02\
    \0\x05\x12\x03\x20\x17\x1d\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x20\x1e\
    #\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x20&'\n\n\n\x02\x04\x02\x12\x04\
    \"\0%\x01\n\n\n\x03\x04\x02\x01\x12\x03\"\x08\x15\n\x0b\n\x04\x04\x02\
    \x02\0\x12\x03#\x02\x13\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03#\x02\x08\n\
    \x0c\n\x05\x04\x02\x02\0\x01\x12\x03#\t\x0e\n\x0c\n\x05\x04\x02\x02\0\
    \x03\x12\x03#\x11\x12\n\x0b\n\x04\x04\x02\x02\x01\x12\x03$\x02\x16\n\x0c\
    \n\x05\x04\x02\x02\x01\x05\x12\x03$\x02\x08\n\x0c\n\x05\x04\x02\x02\x01\
    \x01\x12\x03$\t\x11\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03$\x14\x15\n\n\
    \n\x02\x04\x03\x12\x04'\0*\x01\n\n\n\x03\x04\x03\x01\x12\x03'\x08\x16\n\
    \x0b\n\x04\x04\x03\x02\0\x12\x03(\x02\x13\n\x0c\n\x05\x04\x03\x02\0\x05\
    \x12\x03(\x02\x08\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03(\t\x0e\n\x0c\n\
    \x05\x04\x03\x02\0\x03\x12\x03(\x11\x12\n\x0b\n\x04\x04\x03\x02\x01\x12\
    \x03)\x02\x1c\n\x0c\n\x05\x04\x03\x02\x01\x04\x12\x03)\x02\n\n\x0c\n\x05\
    \x04\x03\x02\x01\x05\x12\x03)\x0b\x11\n\x0c\n\x05\x04\x03\x02\x01\x01\
    \x12\x03)\x12\x17\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x03)\x1a\x1b\n\n\n\
    \x02\x04\x04\x12\x04,\01\x01\n\n\n\x03\x04\x04\x01\x12\x03,\x08\x15\n\
    \x0b\n\x04\x04\x04\x02\0\x12\x03-\x02\x17\n\x0c\n\x05\x04\x04\x02\0\x05\
    \x12\x03-\x02\x08\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x03-\t\x12\n\x0c\n\
    \x05\x04\x04\x02\0\x03\x12\x03-\x15\x16\n\x0b\n\x04\x04\x04\x02\x01\x12\
    \x03.\x02\x16\n\x0c\n\x05\x04\x04\x02\x01\x05\x12\x03.\x02\x08\n\x0c\n\
    \x05\x04\x04\x02\x01\x01\x12\x03.\t\x11\n\x0c\n\x05\x04\x04\x02\x01\x03\
    \x12\x03.\x14\x15\n\x0b\n\x04\x04\x04\x02\x02\x12\x03/\x02\x13\n\x0c\n\
    \x05\x04\x04\x02\x02\x05\x12\x03/\x02\x08\n\x0c\n\x05\x04\x04\x02\x02\
    \x01\x12\x03/\t\x0e\n\x0c\n\x05\x04\x04\x02\x02\x03\x12\x03/\x11\x12\n\
    \x0b\n\x04\x04\x04\x02\x03\x12\x030\x02\x16\n\x0c\n\x05\x04\x04\x02\x03\
    \x05\x12\x030\x02\x08\n\x0c\n\x05\x04\x04\x02\x03\x01\x12\x030\t\x11\n\
    \x0c\n\x05\x04\x04\x02\x03\x03\x12\x030\x14\x15\n\n\n\x02\x04\x05\x12\
    \x043\06\x01\n\n\n\x03\x04\x05\x01\x12\x033\x08\x1c\n\x0b\n\x04\x04\x05\
    \x02\0\x12\x034\x02\x13\n\x0c\n\x05\x04\x05\x02\0\x05\x12\x034\x02\x08\n\
    \x0c\n\x05\x04\x05\x02\0\x01\x12\x034\t\x0e\n\x0c\n\x05\x04\x05\x02\0\
    \x03\x12\x034\x11\x12\n\x0b\n\x04\x04\x05\x02\x01\x12\x035\x02\x16\n\x0c\
    \n\x05\x04\x05\x02\x01\x05\x12\x035\x02\x08\n\x0c\n\x05\x04\x05\x02\x01\
    \x01\x12\x035\t\x11\n\x0c\n\x05\x04\x05\x02\x01\x03\x12\x035\x14\x15\n\n\
    \n\x02\x04\x06\x12\x048\0@\x01\n\n\n\x03\x04\x06\x01\x12\x038\x08\x11\n\
    \x0b\n\x04\x04\x06\x02\0\x12\x039\x02\x10\n\x0c\n\x05\x04\x06\x02\0\x05\
    \x12\x039\x02\x08\n\x0c\n\x05\x04\x06\x02\0\x01\x12\x039\t\x0b\n\x0c\n\
    \x05\x04\x06\x02\0\x03\x12\x039\x0e\x0f\n\x0b\n\x04\x04\x06\x02\x01\x12\
    \x03:\x02\x19\n\x0c\n\x05\x04\x06\x02\x01\x04\x12\x03:\x02\n\n\x0c\n\x05\
    \x04\x06\x02\x01\x05\x12\x03:\x0b\x11\n\x0c\n\x05\x04\x06\x02\x01\x01\
    \x12\x03:\x12\x14\n\x0c\n\x05\x04\x06\x02\x01\x03\x12\x03:\x17\x18\n\x0b\
    \n\x04\x04\x06\x02\x02\x12\x03;\x02\x1a\n\x0c\n\x05\x04\x06\x02\x02\x04\
    \x12\x03;\x02\n\n\x0c\n\x05\x04\x06\x02\x02\x05\x12\x03;\x0b\x11\n\x0c\n\
    \x05\x04\x06\x02\x02\x01\x12\x03;\x12\x15\n\x0c\n\x05\x04\x06\x02\x02\
    \x03\x12\x03;\x18\x19\n\x0b\n\x04\x04\x06\x02\x03\x12\x03<\x02\x15\n\x0c\
    \n\x05\x04\x06\x02\x03\x05\x12\x03<\x02\x08\n\x0c\n\x05\x04\x06\x02\x03\
    \x01\x12\x03<\t\x10\n\x0c\n\x05\x04\x06\x02\x03\x03\x12\x03<\x13\x14\n\
    \x0b\n\x04\x04\x06\x02\x04\x12\x03=\x02\x1f\n\x0c\n\x05\x04\x06\x02\x04\
    \x06\x12\x03=\x02\r\n\x0c\n\x05\x04\x06\x02\x04\x01\x12\x03=\x0e\x1a\n\
    \x0c\n\x05\x04\x06\x02\x04\x03\x12\x03=\x1d\x1e\n\x0b\n\x04\x04\x06\x02\
    \x05\x12\x03>\x02\x12\n\x0c\n\x05\x04\x06\x02\x05\x05\x12\x03>\x02\x08\n\
    \x0c\n\x05\x04\x06\x02\x05\x01\x12\x03>\t\r\n\x0c\n\x05\x04\x06\x02\x05\
    \x03\x12\x03>\x10\x11\n\x0b\n\x04\x04\x06\x02\x06\x12\x03?\x02\x1c\n\x0c\
    \n\x05\x04\x06\x02\x06\x04\x12\x03?\x02\n\n\x0c\n\x05\x04\x06\x02\x06\
    \x05\x12\x03?\x0b\x11\n\x0c\n\x05\x04\x06\x02\x06\x01\x12\x03?\x12\x17\n\
    \x0c\n\x05\x04\x06\x02\x06\x03\x12\x03?\x1a\x1bb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
