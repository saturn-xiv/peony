// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `protos/hal.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
pub struct TtyRequest {
    // message fields
    pub commands: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TtyRequest {
    fn default() -> &'a TtyRequest {
        <TtyRequest as ::protobuf::Message>::default_instance()
    }
}

impl TtyRequest {
    pub fn new() -> TtyRequest {
        ::std::default::Default::default()
    }

    // repeated string commands = 1;


    pub fn get_commands(&self) -> &[::std::string::String] {
        &self.commands
    }
    pub fn clear_commands(&mut self) {
        self.commands.clear();
    }

    // Param is passed by value, moved
    pub fn set_commands(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.commands = v;
    }

    // Mutable pointer to the field.
    pub fn mut_commands(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.commands
    }

    // Take field
    pub fn take_commands(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.commands, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for TtyRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.commands)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.commands {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.commands {
            os.write_string(1, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TtyRequest {
        TtyRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "commands",
                |m: &TtyRequest| { &m.commands },
                |m: &mut TtyRequest| { &mut m.commands },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TtyRequest>(
                "TtyRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TtyRequest {
        static instance: ::protobuf::rt::LazyV2<TtyRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TtyRequest::new)
    }
}

impl ::protobuf::Clear for TtyRequest {
    fn clear(&mut self) {
        self.commands.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TtyRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TtyRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TtyResponse {
    // message fields
    pub field_type: ::std::string::String,
    pub payload: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TtyResponse {
    fn default() -> &'a TtyResponse {
        <TtyResponse as ::protobuf::Message>::default_instance()
    }
}

impl TtyResponse {
    pub fn new() -> TtyResponse {
        ::std::default::Default::default()
    }

    // string type = 1;


    pub fn get_field_type(&self) -> &str {
        &self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: ::std::string::String) {
        self.field_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_field_type(&mut self) -> &mut ::std::string::String {
        &mut self.field_type
    }

    // Take field
    pub fn take_field_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.field_type, ::std::string::String::new())
    }

    // string payload = 2;


    pub fn get_payload(&self) -> &str {
        &self.payload
    }
    pub fn clear_payload(&mut self) {
        self.payload.clear();
    }

    // Param is passed by value, moved
    pub fn set_payload(&mut self, v: ::std::string::String) {
        self.payload = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_payload(&mut self) -> &mut ::std::string::String {
        &mut self.payload
    }

    // Take field
    pub fn take_payload(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.payload, ::std::string::String::new())
    }
}

impl ::protobuf::Message for TtyResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.field_type)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.payload)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.field_type.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.field_type);
        }
        if !self.payload.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.payload);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.field_type.is_empty() {
            os.write_string(1, &self.field_type)?;
        }
        if !self.payload.is_empty() {
            os.write_string(2, &self.payload)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TtyResponse {
        TtyResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "type",
                |m: &TtyResponse| { &m.field_type },
                |m: &mut TtyResponse| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "payload",
                |m: &TtyResponse| { &m.payload },
                |m: &mut TtyResponse| { &mut m.payload },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TtyResponse>(
                "TtyResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TtyResponse {
        static instance: ::protobuf::rt::LazyV2<TtyResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TtyResponse::new)
    }
}

impl ::protobuf::Clear for TtyResponse {
    fn clear(&mut self) {
        self.field_type.clear();
        self.payload.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TtyResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TtyResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AudioPlayRequest {
    // message fields
    pub files: ::protobuf::RepeatedField<AudioPlayRequest_File>,
    pub field_loop: i32,
    pub delay: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AudioPlayRequest {
    fn default() -> &'a AudioPlayRequest {
        <AudioPlayRequest as ::protobuf::Message>::default_instance()
    }
}

impl AudioPlayRequest {
    pub fn new() -> AudioPlayRequest {
        ::std::default::Default::default()
    }

    // repeated .peony.hal.AudioPlayRequest.File files = 1;


    pub fn get_files(&self) -> &[AudioPlayRequest_File] {
        &self.files
    }
    pub fn clear_files(&mut self) {
        self.files.clear();
    }

    // Param is passed by value, moved
    pub fn set_files(&mut self, v: ::protobuf::RepeatedField<AudioPlayRequest_File>) {
        self.files = v;
    }

    // Mutable pointer to the field.
    pub fn mut_files(&mut self) -> &mut ::protobuf::RepeatedField<AudioPlayRequest_File> {
        &mut self.files
    }

    // Take field
    pub fn take_files(&mut self) -> ::protobuf::RepeatedField<AudioPlayRequest_File> {
        ::std::mem::replace(&mut self.files, ::protobuf::RepeatedField::new())
    }

    // int32 loop = 2;


    pub fn get_field_loop(&self) -> i32 {
        self.field_loop
    }
    pub fn clear_field_loop(&mut self) {
        self.field_loop = 0;
    }

    // Param is passed by value, moved
    pub fn set_field_loop(&mut self, v: i32) {
        self.field_loop = v;
    }

    // int32 delay = 3;


    pub fn get_delay(&self) -> i32 {
        self.delay
    }
    pub fn clear_delay(&mut self) {
        self.delay = 0;
    }

    // Param is passed by value, moved
    pub fn set_delay(&mut self, v: i32) {
        self.delay = v;
    }
}

impl ::protobuf::Message for AudioPlayRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.files {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.files)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.field_loop = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.delay = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.files {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.field_loop != 0 {
            my_size += ::protobuf::rt::value_size(2, self.field_loop, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.delay != 0 {
            my_size += ::protobuf::rt::value_size(3, self.delay, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.files {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.field_loop != 0 {
            os.write_int32(2, self.field_loop)?;
        }
        if self.delay != 0 {
            os.write_int32(3, self.delay)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AudioPlayRequest {
        AudioPlayRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<AudioPlayRequest_File>>(
                "files",
                |m: &AudioPlayRequest| { &m.files },
                |m: &mut AudioPlayRequest| { &mut m.files },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "loop",
                |m: &AudioPlayRequest| { &m.field_loop },
                |m: &mut AudioPlayRequest| { &mut m.field_loop },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "delay",
                |m: &AudioPlayRequest| { &m.delay },
                |m: &mut AudioPlayRequest| { &mut m.delay },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AudioPlayRequest>(
                "AudioPlayRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AudioPlayRequest {
        static instance: ::protobuf::rt::LazyV2<AudioPlayRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AudioPlayRequest::new)
    }
}

impl ::protobuf::Clear for AudioPlayRequest {
    fn clear(&mut self) {
        self.files.clear();
        self.field_loop = 0;
        self.delay = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AudioPlayRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AudioPlayRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AudioPlayRequest_File {
    // message fields
    pub field_type: AudioPlayRequest_File_Type,
    pub payload: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AudioPlayRequest_File {
    fn default() -> &'a AudioPlayRequest_File {
        <AudioPlayRequest_File as ::protobuf::Message>::default_instance()
    }
}

impl AudioPlayRequest_File {
    pub fn new() -> AudioPlayRequest_File {
        ::std::default::Default::default()
    }

    // .peony.hal.AudioPlayRequest.File.Type type = 1;


    pub fn get_field_type(&self) -> AudioPlayRequest_File_Type {
        self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = AudioPlayRequest_File_Type::wav;
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: AudioPlayRequest_File_Type) {
        self.field_type = v;
    }

    // bytes payload = 2;


    pub fn get_payload(&self) -> &[u8] {
        &self.payload
    }
    pub fn clear_payload(&mut self) {
        self.payload.clear();
    }

    // Param is passed by value, moved
    pub fn set_payload(&mut self, v: ::std::vec::Vec<u8>) {
        self.payload = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_payload(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.payload
    }

    // Take field
    pub fn take_payload(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.payload, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for AudioPlayRequest_File {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.payload)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.field_type != AudioPlayRequest_File_Type::wav {
            my_size += ::protobuf::rt::enum_size(1, self.field_type);
        }
        if !self.payload.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.payload);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.field_type != AudioPlayRequest_File_Type::wav {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.field_type))?;
        }
        if !self.payload.is_empty() {
            os.write_bytes(2, &self.payload)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AudioPlayRequest_File {
        AudioPlayRequest_File::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<AudioPlayRequest_File_Type>>(
                "type",
                |m: &AudioPlayRequest_File| { &m.field_type },
                |m: &mut AudioPlayRequest_File| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "payload",
                |m: &AudioPlayRequest_File| { &m.payload },
                |m: &mut AudioPlayRequest_File| { &mut m.payload },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AudioPlayRequest_File>(
                "AudioPlayRequest.File",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AudioPlayRequest_File {
        static instance: ::protobuf::rt::LazyV2<AudioPlayRequest_File> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AudioPlayRequest_File::new)
    }
}

impl ::protobuf::Clear for AudioPlayRequest_File {
    fn clear(&mut self) {
        self.field_type = AudioPlayRequest_File_Type::wav;
        self.payload.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AudioPlayRequest_File {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AudioPlayRequest_File {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum AudioPlayRequest_File_Type {
    wav = 0,
    mp3 = 1,
}

impl ::protobuf::ProtobufEnum for AudioPlayRequest_File_Type {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<AudioPlayRequest_File_Type> {
        match value {
            0 => ::std::option::Option::Some(AudioPlayRequest_File_Type::wav),
            1 => ::std::option::Option::Some(AudioPlayRequest_File_Type::mp3),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [AudioPlayRequest_File_Type] = &[
            AudioPlayRequest_File_Type::wav,
            AudioPlayRequest_File_Type::mp3,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<AudioPlayRequest_File_Type>("AudioPlayRequest.File.Type", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for AudioPlayRequest_File_Type {
}

impl ::std::default::Default for AudioPlayRequest_File_Type {
    fn default() -> Self {
        AudioPlayRequest_File_Type::wav
    }
}

impl ::protobuf::reflect::ProtobufValue for AudioPlayRequest_File_Type {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LedSetRequest {
    // message fields
    pub id: i32,
    pub on: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LedSetRequest {
    fn default() -> &'a LedSetRequest {
        <LedSetRequest as ::protobuf::Message>::default_instance()
    }
}

impl LedSetRequest {
    pub fn new() -> LedSetRequest {
        ::std::default::Default::default()
    }

    // int32 id = 1;


    pub fn get_id(&self) -> i32 {
        self.id
    }
    pub fn clear_id(&mut self) {
        self.id = 0;
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: i32) {
        self.id = v;
    }

    // bool on = 2;


    pub fn get_on(&self) -> bool {
        self.on
    }
    pub fn clear_on(&mut self) {
        self.on = false;
    }

    // Param is passed by value, moved
    pub fn set_on(&mut self, v: bool) {
        self.on = v;
    }
}

impl ::protobuf::Message for LedSetRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.on = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.on != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.id != 0 {
            os.write_int32(1, self.id)?;
        }
        if self.on != false {
            os.write_bool(2, self.on)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LedSetRequest {
        LedSetRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "id",
                |m: &LedSetRequest| { &m.id },
                |m: &mut LedSetRequest| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "on",
                |m: &LedSetRequest| { &m.on },
                |m: &mut LedSetRequest| { &mut m.on },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<LedSetRequest>(
                "LedSetRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static LedSetRequest {
        static instance: ::protobuf::rt::LazyV2<LedSetRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(LedSetRequest::new)
    }
}

impl ::protobuf::Clear for LedSetRequest {
    fn clear(&mut self) {
        self.id = 0;
        self.on = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LedSetRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LedSetRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LedGetRequest {
    // message fields
    pub id: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LedGetRequest {
    fn default() -> &'a LedGetRequest {
        <LedGetRequest as ::protobuf::Message>::default_instance()
    }
}

impl LedGetRequest {
    pub fn new() -> LedGetRequest {
        ::std::default::Default::default()
    }

    // int32 id = 1;


    pub fn get_id(&self) -> i32 {
        self.id
    }
    pub fn clear_id(&mut self) {
        self.id = 0;
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: i32) {
        self.id = v;
    }
}

impl ::protobuf::Message for LedGetRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.id != 0 {
            os.write_int32(1, self.id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LedGetRequest {
        LedGetRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "id",
                |m: &LedGetRequest| { &m.id },
                |m: &mut LedGetRequest| { &mut m.id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<LedGetRequest>(
                "LedGetRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static LedGetRequest {
        static instance: ::protobuf::rt::LazyV2<LedGetRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(LedGetRequest::new)
    }
}

impl ::protobuf::Clear for LedGetRequest {
    fn clear(&mut self) {
        self.id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LedGetRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LedGetRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LedGetResponse {
    // message fields
    pub on: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LedGetResponse {
    fn default() -> &'a LedGetResponse {
        <LedGetResponse as ::protobuf::Message>::default_instance()
    }
}

impl LedGetResponse {
    pub fn new() -> LedGetResponse {
        ::std::default::Default::default()
    }

    // bool on = 2;


    pub fn get_on(&self) -> bool {
        self.on
    }
    pub fn clear_on(&mut self) {
        self.on = false;
    }

    // Param is passed by value, moved
    pub fn set_on(&mut self, v: bool) {
        self.on = v;
    }
}

impl ::protobuf::Message for LedGetResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.on = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.on != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.on != false {
            os.write_bool(2, self.on)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LedGetResponse {
        LedGetResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "on",
                |m: &LedGetResponse| { &m.on },
                |m: &mut LedGetResponse| { &mut m.on },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<LedGetResponse>(
                "LedGetResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static LedGetResponse {
        static instance: ::protobuf::rt::LazyV2<LedGetResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(LedGetResponse::new)
    }
}

impl ::protobuf::Clear for LedGetResponse {
    fn clear(&mut self) {
        self.on = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LedGetResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LedGetResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ButtonResponse {
    // message fields
    pub id: i32,
    pub field_type: ButtonResponse_Type,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ButtonResponse {
    fn default() -> &'a ButtonResponse {
        <ButtonResponse as ::protobuf::Message>::default_instance()
    }
}

impl ButtonResponse {
    pub fn new() -> ButtonResponse {
        ::std::default::Default::default()
    }

    // int32 id = 1;


    pub fn get_id(&self) -> i32 {
        self.id
    }
    pub fn clear_id(&mut self) {
        self.id = 0;
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: i32) {
        self.id = v;
    }

    // .peony.hal.ButtonResponse.Type type = 2;


    pub fn get_field_type(&self) -> ButtonResponse_Type {
        self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = ButtonResponse_Type::single;
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: ButtonResponse_Type) {
        self.field_type = v;
    }
}

impl ::protobuf::Message for ButtonResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 2, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.field_type != ButtonResponse_Type::single {
            my_size += ::protobuf::rt::enum_size(2, self.field_type);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.id != 0 {
            os.write_int32(1, self.id)?;
        }
        if self.field_type != ButtonResponse_Type::single {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&self.field_type))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ButtonResponse {
        ButtonResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "id",
                |m: &ButtonResponse| { &m.id },
                |m: &mut ButtonResponse| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ButtonResponse_Type>>(
                "type",
                |m: &ButtonResponse| { &m.field_type },
                |m: &mut ButtonResponse| { &mut m.field_type },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ButtonResponse>(
                "ButtonResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ButtonResponse {
        static instance: ::protobuf::rt::LazyV2<ButtonResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ButtonResponse::new)
    }
}

impl ::protobuf::Clear for ButtonResponse {
    fn clear(&mut self) {
        self.id = 0;
        self.field_type = ButtonResponse_Type::single;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ButtonResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ButtonResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ButtonResponse_Type {
    single = 0,
    double = 1,
    long = 2,
}

impl ::protobuf::ProtobufEnum for ButtonResponse_Type {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ButtonResponse_Type> {
        match value {
            0 => ::std::option::Option::Some(ButtonResponse_Type::single),
            1 => ::std::option::Option::Some(ButtonResponse_Type::double),
            2 => ::std::option::Option::Some(ButtonResponse_Type::long),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ButtonResponse_Type] = &[
            ButtonResponse_Type::single,
            ButtonResponse_Type::double,
            ButtonResponse_Type::long,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ButtonResponse_Type>("ButtonResponse.Type", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ButtonResponse_Type {
}

impl ::std::default::Default for ButtonResponse_Type {
    fn default() -> Self {
        ButtonResponse_Type::single
    }
}

impl ::protobuf::reflect::ProtobufValue for ButtonResponse_Type {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x10protos/hal.proto\x12\tpeony.hal\x1a\x1bgoogle/protobuf/empty.proto\
    \"(\n\nTtyRequest\x12\x1a\n\x08commands\x18\x01\x20\x03(\tR\x08commands\
    \";\n\x0bTtyResponse\x12\x12\n\x04type\x18\x01\x20\x01(\tR\x04type\x12\
    \x18\n\x07payload\x18\x02\x20\x01(\tR\x07payload\"\xeb\x01\n\x10AudioPla\
    yRequest\x126\n\x05files\x18\x01\x20\x03(\x0b2\x20.peony.hal.AudioPlayRe\
    quest.FileR\x05files\x12\x12\n\x04loop\x18\x02\x20\x01(\x05R\x04loop\x12\
    \x14\n\x05delay\x18\x03\x20\x01(\x05R\x05delay\x1au\n\x04File\x129\n\x04\
    type\x18\x01\x20\x01(\x0e2%.peony.hal.AudioPlayRequest.File.TypeR\x04typ\
    e\x12\x18\n\x07payload\x18\x02\x20\x01(\x0cR\x07payload\"\x18\n\x04Type\
    \x12\x07\n\x03wav\x10\0\x12\x07\n\x03mp3\x10\x01\"/\n\rLedSetRequest\x12\
    \x0e\n\x02id\x18\x01\x20\x01(\x05R\x02id\x12\x0e\n\x02on\x18\x02\x20\x01\
    (\x08R\x02on\"\x1f\n\rLedGetRequest\x12\x0e\n\x02id\x18\x01\x20\x01(\x05\
    R\x02id\"\x20\n\x0eLedGetResponse\x12\x0e\n\x02on\x18\x02\x20\x01(\x08R\
    \x02on\"~\n\x0eButtonResponse\x12\x0e\n\x02id\x18\x01\x20\x01(\x05R\x02i\
    d\x122\n\x04type\x18\x02\x20\x01(\x0e2\x1e.peony.hal.ButtonResponse.Type\
    R\x04type\"(\n\x04Type\x12\n\n\x06single\x10\0\x12\n\n\x06double\x10\x01\
    \x12\x08\n\x04long\x10\x022\x80\x01\n\nTtyService\x128\n\x05Write\x12\
    \x15.peony.hal.TtyRequest\x1a\x16.google.protobuf.Empty\"\0\x128\n\x04Re\
    ad\x12\x16.google.protobuf.Empty\x1a\x16.peony.hal.TtyResponse\"\02\x87\
    \x01\n\x0cAudioService\x12=\n\x04Play\x12\x1b.peony.hal.AudioPlayRequest\
    \x1a\x16.google.protobuf.Empty\"\0\x128\n\x04Stop\x12\x16.google.protobu\
    f.Empty\x1a\x16.google.protobuf.Empty\"\02\xd1\x01\n\x0bGpioService\x12<\
    \n\x06LedSet\x12\x18.peony.hal.LedSetRequest\x1a\x16.google.protobuf.Emp\
    ty\"\0\x12?\n\x06LedGet\x12\x18.peony.hal.LedGetRequest\x1a\x19.peony.ha\
    l.LedGetResponse\"\0\x12C\n\x0cButtonReport\x12\x16.google.protobuf.Empt\
    y\x1a\x19.peony.hal.ButtonResponse\"\0J\x92\x0e\n\x06\x12\x04\0\0:\x01\n\
    \x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\0\x12\n\t\n\
    \x02\x03\0\x12\x03\x04\0%\n\n\n\x02\x06\0\x12\x04\x06\0\t\x01\n\n\n\x03\
    \x06\0\x01\x12\x03\x06\x08\x12\n\x0b\n\x04\x06\0\x02\0\x12\x03\x07\x02:\
    \n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\x07\x06\x0b\n\x0c\n\x05\x06\0\x02\0\
    \x02\x12\x03\x07\x0c\x16\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\x07!6\n\x0b\
    \n\x04\x06\0\x02\x01\x12\x03\x08\x02:\n\x0c\n\x05\x06\0\x02\x01\x01\x12\
    \x03\x08\x06\n\n\x0c\n\x05\x06\0\x02\x01\x02\x12\x03\x08\x0b\x20\n\x0c\n\
    \x05\x06\0\x02\x01\x03\x12\x03\x08+6\n\n\n\x02\x06\x01\x12\x04\x0b\0\x0e\
    \x01\n\n\n\x03\x06\x01\x01\x12\x03\x0b\x08\x14\n\x0b\n\x04\x06\x01\x02\0\
    \x12\x03\x0c\x02?\n\x0c\n\x05\x06\x01\x02\0\x01\x12\x03\x0c\x06\n\n\x0c\
    \n\x05\x06\x01\x02\0\x02\x12\x03\x0c\x0b\x1b\n\x0c\n\x05\x06\x01\x02\0\
    \x03\x12\x03\x0c&;\n\x0b\n\x04\x06\x01\x02\x01\x12\x03\r\x02D\n\x0c\n\
    \x05\x06\x01\x02\x01\x01\x12\x03\r\x06\n\n\x0c\n\x05\x06\x01\x02\x01\x02\
    \x12\x03\r\x0b\x20\n\x0c\n\x05\x06\x01\x02\x01\x03\x12\x03\r+@\n\n\n\x02\
    \x06\x02\x12\x04\x10\0\x14\x01\n\n\n\x03\x06\x02\x01\x12\x03\x10\x08\x13\
    \n\x0b\n\x04\x06\x02\x02\0\x12\x03\x11\x02>\n\x0c\n\x05\x06\x02\x02\0\
    \x01\x12\x03\x11\x06\x0c\n\x0c\n\x05\x06\x02\x02\0\x02\x12\x03\x11\r\x1a\
    \n\x0c\n\x05\x06\x02\x02\0\x03\x12\x03\x11%:\n\x0b\n\x04\x06\x02\x02\x01\
    \x12\x03\x12\x027\n\x0c\n\x05\x06\x02\x02\x01\x01\x12\x03\x12\x06\x0c\n\
    \x0c\n\x05\x06\x02\x02\x01\x02\x12\x03\x12\r\x1a\n\x0c\n\x05\x06\x02\x02\
    \x01\x03\x12\x03\x12%3\n\x0b\n\x04\x06\x02\x02\x02\x12\x03\x13\x02E\n\
    \x0c\n\x05\x06\x02\x02\x02\x01\x12\x03\x13\x06\x12\n\x0c\n\x05\x06\x02\
    \x02\x02\x02\x12\x03\x13\x13(\n\x0c\n\x05\x06\x02\x02\x02\x03\x12\x03\
    \x133A\n\t\n\x02\x04\0\x12\x03\x16\04\n\n\n\x03\x04\0\x01\x12\x03\x16\
    \x08\x12\n\x0b\n\x04\x04\0\x02\0\x12\x03\x16\x152\n\x0c\n\x05\x04\0\x02\
    \0\x04\x12\x03\x16\x15\x1d\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x16\x1e$\
    \n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x16%-\n\x0c\n\x05\x04\0\x02\0\x03\
    \x12\x03\x1601\n\n\n\x02\x04\x01\x12\x04\x17\0\x1a\x01\n\n\n\x03\x04\x01\
    \x01\x12\x03\x17\x08\x13\n\x0b\n\x04\x04\x01\x02\0\x12\x03\x18\x02\x12\n\
    \x0c\n\x05\x04\x01\x02\0\x05\x12\x03\x18\x02\x08\n\x0c\n\x05\x04\x01\x02\
    \0\x01\x12\x03\x18\t\r\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x18\x10\x11\
    \n\x0b\n\x04\x04\x01\x02\x01\x12\x03\x19\x02\x15\n\x0c\n\x05\x04\x01\x02\
    \x01\x05\x12\x03\x19\x02\x08\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x19\
    \t\x10\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\x19\x13\x14\n\n\n\x02\x04\
    \x02\x12\x04\x1c\0(\x01\n\n\n\x03\x04\x02\x01\x12\x03\x1c\x08\x18\n\x0c\
    \n\x04\x04\x02\x03\0\x12\x04\x1d\x02$\x03\n\x0c\n\x05\x04\x02\x03\0\x01\
    \x12\x03\x1d\n\x0e\n\x0e\n\x06\x04\x02\x03\0\x04\0\x12\x04\x1e\x04!\x05\
    \n\x0e\n\x07\x04\x02\x03\0\x04\0\x01\x12\x03\x1e\t\r\n\x0f\n\x08\x04\x02\
    \x03\0\x04\0\x02\0\x12\x03\x1f\x06\x0e\n\x10\n\t\x04\x02\x03\0\x04\0\x02\
    \0\x01\x12\x03\x1f\x06\t\n\x10\n\t\x04\x02\x03\0\x04\0\x02\0\x02\x12\x03\
    \x1f\x0c\r\n\x0f\n\x08\x04\x02\x03\0\x04\0\x02\x01\x12\x03\x20\x06\x0e\n\
    \x10\n\t\x04\x02\x03\0\x04\0\x02\x01\x01\x12\x03\x20\x06\t\n\x10\n\t\x04\
    \x02\x03\0\x04\0\x02\x01\x02\x12\x03\x20\x0c\r\n\r\n\x06\x04\x02\x03\0\
    \x02\0\x12\x03\"\x04\x12\n\x0e\n\x07\x04\x02\x03\0\x02\0\x06\x12\x03\"\
    \x04\x08\n\x0e\n\x07\x04\x02\x03\0\x02\0\x01\x12\x03\"\t\r\n\x0e\n\x07\
    \x04\x02\x03\0\x02\0\x03\x12\x03\"\x10\x11\n\r\n\x06\x04\x02\x03\0\x02\
    \x01\x12\x03#\x04\x16\n\x0e\n\x07\x04\x02\x03\0\x02\x01\x05\x12\x03#\x04\
    \t\n\x0e\n\x07\x04\x02\x03\0\x02\x01\x01\x12\x03#\n\x11\n\x0e\n\x07\x04\
    \x02\x03\0\x02\x01\x03\x12\x03#\x14\x15\n\x0b\n\x04\x04\x02\x02\0\x12\
    \x03%\x02\x1a\n\x0c\n\x05\x04\x02\x02\0\x04\x12\x03%\x02\n\n\x0c\n\x05\
    \x04\x02\x02\0\x06\x12\x03%\x0b\x0f\n\x0c\n\x05\x04\x02\x02\0\x01\x12\
    \x03%\x10\x15\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03%\x18\x19\n\x0b\n\x04\
    \x04\x02\x02\x01\x12\x03&\x02\x11\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\
    \x03&\x02\x07\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03&\x08\x0c\n\x0c\n\
    \x05\x04\x02\x02\x01\x03\x12\x03&\x0f\x10\n\x0b\n\x04\x04\x02\x02\x02\
    \x12\x03'\x02\x12\n\x0c\n\x05\x04\x02\x02\x02\x05\x12\x03'\x02\x07\n\x0c\
    \n\x05\x04\x02\x02\x02\x01\x12\x03'\x08\r\n\x0c\n\x05\x04\x02\x02\x02\
    \x03\x12\x03'\x10\x11\n\n\n\x02\x04\x03\x12\x04*\0-\x01\n\n\n\x03\x04\
    \x03\x01\x12\x03*\x08\x15\n\x0b\n\x04\x04\x03\x02\0\x12\x03+\x02\x0f\n\
    \x0c\n\x05\x04\x03\x02\0\x05\x12\x03+\x02\x07\n\x0c\n\x05\x04\x03\x02\0\
    \x01\x12\x03+\x08\n\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03+\r\x0e\n\x0b\n\
    \x04\x04\x03\x02\x01\x12\x03,\x02\x0e\n\x0c\n\x05\x04\x03\x02\x01\x05\
    \x12\x03,\x02\x06\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\x03,\x07\t\n\x0c\n\
    \x05\x04\x03\x02\x01\x03\x12\x03,\x0c\r\n\t\n\x02\x04\x04\x12\x03/\0'\n\
    \n\n\x03\x04\x04\x01\x12\x03/\x08\x15\n\x0b\n\x04\x04\x04\x02\0\x12\x03/\
    \x18%\n\x0c\n\x05\x04\x04\x02\0\x05\x12\x03/\x18\x1d\n\x0c\n\x05\x04\x04\
    \x02\0\x01\x12\x03/\x1e\x20\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03/#$\n\t\
    \n\x02\x04\x05\x12\x030\0'\n\n\n\x03\x04\x05\x01\x12\x030\x08\x16\n\x0b\
    \n\x04\x04\x05\x02\0\x12\x030\x19%\n\x0c\n\x05\x04\x05\x02\0\x05\x12\x03\
    0\x19\x1d\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x030\x1e\x20\n\x0c\n\x05\x04\
    \x05\x02\0\x03\x12\x030#$\n\n\n\x02\x04\x06\x12\x042\0:\x01\n\n\n\x03\
    \x04\x06\x01\x12\x032\x08\x16\n\x0c\n\x04\x04\x06\x04\0\x12\x043\x027\
    \x03\n\x0c\n\x05\x04\x06\x04\0\x01\x12\x033\x07\x0b\n\r\n\x06\x04\x06\
    \x04\0\x02\0\x12\x034\x04\x0f\n\x0e\n\x07\x04\x06\x04\0\x02\0\x01\x12\
    \x034\x04\n\n\x0e\n\x07\x04\x06\x04\0\x02\0\x02\x12\x034\r\x0e\n\r\n\x06\
    \x04\x06\x04\0\x02\x01\x12\x035\x04\x0f\n\x0e\n\x07\x04\x06\x04\0\x02\
    \x01\x01\x12\x035\x04\n\n\x0e\n\x07\x04\x06\x04\0\x02\x01\x02\x12\x035\r\
    \x0e\n\r\n\x06\x04\x06\x04\0\x02\x02\x12\x036\x04\r\n\x0e\n\x07\x04\x06\
    \x04\0\x02\x02\x01\x12\x036\x04\x08\n\x0e\n\x07\x04\x06\x04\0\x02\x02\
    \x02\x12\x036\x0b\x0c\n\x0b\n\x04\x04\x06\x02\0\x12\x038\x02\x0f\n\x0c\n\
    \x05\x04\x06\x02\0\x05\x12\x038\x02\x07\n\x0c\n\x05\x04\x06\x02\0\x01\
    \x12\x038\x08\n\n\x0c\n\x05\x04\x06\x02\0\x03\x12\x038\r\x0e\n\x0b\n\x04\
    \x04\x06\x02\x01\x12\x039\x02\x10\n\x0c\n\x05\x04\x06\x02\x01\x06\x12\
    \x039\x02\x06\n\x0c\n\x05\x04\x06\x02\x01\x01\x12\x039\x07\x0b\n\x0c\n\
    \x05\x04\x06\x02\x01\x03\x12\x039\x0e\x0fb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
