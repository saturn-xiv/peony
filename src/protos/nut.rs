// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `protos/nut.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
pub struct HeartbeatResponse {
    // message fields
    pub version: ::std::string::String,
    pub postgresql: ::std::string::String,
    pub redis: ::std::string::String,
    pub rabbitmq: ::std::string::String,
    pub elastic_search: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HeartbeatResponse {
    fn default() -> &'a HeartbeatResponse {
        <HeartbeatResponse as ::protobuf::Message>::default_instance()
    }
}

impl HeartbeatResponse {
    pub fn new() -> HeartbeatResponse {
        ::std::default::Default::default()
    }

    // string version = 1;


    pub fn get_version(&self) -> &str {
        &self.version
    }
    pub fn clear_version(&mut self) {
        self.version.clear();
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: ::std::string::String) {
        self.version = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_version(&mut self) -> &mut ::std::string::String {
        &mut self.version
    }

    // Take field
    pub fn take_version(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.version, ::std::string::String::new())
    }

    // string postgresql = 2;


    pub fn get_postgresql(&self) -> &str {
        &self.postgresql
    }
    pub fn clear_postgresql(&mut self) {
        self.postgresql.clear();
    }

    // Param is passed by value, moved
    pub fn set_postgresql(&mut self, v: ::std::string::String) {
        self.postgresql = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_postgresql(&mut self) -> &mut ::std::string::String {
        &mut self.postgresql
    }

    // Take field
    pub fn take_postgresql(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.postgresql, ::std::string::String::new())
    }

    // string redis = 3;


    pub fn get_redis(&self) -> &str {
        &self.redis
    }
    pub fn clear_redis(&mut self) {
        self.redis.clear();
    }

    // Param is passed by value, moved
    pub fn set_redis(&mut self, v: ::std::string::String) {
        self.redis = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_redis(&mut self) -> &mut ::std::string::String {
        &mut self.redis
    }

    // Take field
    pub fn take_redis(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.redis, ::std::string::String::new())
    }

    // string rabbitmq = 4;


    pub fn get_rabbitmq(&self) -> &str {
        &self.rabbitmq
    }
    pub fn clear_rabbitmq(&mut self) {
        self.rabbitmq.clear();
    }

    // Param is passed by value, moved
    pub fn set_rabbitmq(&mut self, v: ::std::string::String) {
        self.rabbitmq = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rabbitmq(&mut self) -> &mut ::std::string::String {
        &mut self.rabbitmq
    }

    // Take field
    pub fn take_rabbitmq(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.rabbitmq, ::std::string::String::new())
    }

    // string elastic_search = 5;


    pub fn get_elastic_search(&self) -> &str {
        &self.elastic_search
    }
    pub fn clear_elastic_search(&mut self) {
        self.elastic_search.clear();
    }

    // Param is passed by value, moved
    pub fn set_elastic_search(&mut self, v: ::std::string::String) {
        self.elastic_search = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_elastic_search(&mut self) -> &mut ::std::string::String {
        &mut self.elastic_search
    }

    // Take field
    pub fn take_elastic_search(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.elastic_search, ::std::string::String::new())
    }
}

impl ::protobuf::Message for HeartbeatResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.version)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.postgresql)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.redis)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.rabbitmq)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.elastic_search)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.version.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.version);
        }
        if !self.postgresql.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.postgresql);
        }
        if !self.redis.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.redis);
        }
        if !self.rabbitmq.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.rabbitmq);
        }
        if !self.elastic_search.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.elastic_search);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.version.is_empty() {
            os.write_string(1, &self.version)?;
        }
        if !self.postgresql.is_empty() {
            os.write_string(2, &self.postgresql)?;
        }
        if !self.redis.is_empty() {
            os.write_string(3, &self.redis)?;
        }
        if !self.rabbitmq.is_empty() {
            os.write_string(4, &self.rabbitmq)?;
        }
        if !self.elastic_search.is_empty() {
            os.write_string(5, &self.elastic_search)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HeartbeatResponse {
        HeartbeatResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "version",
                |m: &HeartbeatResponse| { &m.version },
                |m: &mut HeartbeatResponse| { &mut m.version },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "postgresql",
                |m: &HeartbeatResponse| { &m.postgresql },
                |m: &mut HeartbeatResponse| { &mut m.postgresql },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "redis",
                |m: &HeartbeatResponse| { &m.redis },
                |m: &mut HeartbeatResponse| { &mut m.redis },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "rabbitmq",
                |m: &HeartbeatResponse| { &m.rabbitmq },
                |m: &mut HeartbeatResponse| { &mut m.rabbitmq },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "elastic_search",
                |m: &HeartbeatResponse| { &m.elastic_search },
                |m: &mut HeartbeatResponse| { &mut m.elastic_search },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<HeartbeatResponse>(
                "HeartbeatResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static HeartbeatResponse {
        static instance: ::protobuf::rt::LazyV2<HeartbeatResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(HeartbeatResponse::new)
    }
}

impl ::protobuf::Clear for HeartbeatResponse {
    fn clear(&mut self) {
        self.version.clear();
        self.postgresql.clear();
        self.redis.clear();
        self.rabbitmq.clear();
        self.elastic_search.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HeartbeatResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HeartbeatResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SetLocaleRequest {
    // message fields
    pub lang: ::std::string::String,
    pub code: ::std::string::String,
    pub message: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SetLocaleRequest {
    fn default() -> &'a SetLocaleRequest {
        <SetLocaleRequest as ::protobuf::Message>::default_instance()
    }
}

impl SetLocaleRequest {
    pub fn new() -> SetLocaleRequest {
        ::std::default::Default::default()
    }

    // string lang = 1;


    pub fn get_lang(&self) -> &str {
        &self.lang
    }
    pub fn clear_lang(&mut self) {
        self.lang.clear();
    }

    // Param is passed by value, moved
    pub fn set_lang(&mut self, v: ::std::string::String) {
        self.lang = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_lang(&mut self) -> &mut ::std::string::String {
        &mut self.lang
    }

    // Take field
    pub fn take_lang(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.lang, ::std::string::String::new())
    }

    // string code = 2;


    pub fn get_code(&self) -> &str {
        &self.code
    }
    pub fn clear_code(&mut self) {
        self.code.clear();
    }

    // Param is passed by value, moved
    pub fn set_code(&mut self, v: ::std::string::String) {
        self.code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_code(&mut self) -> &mut ::std::string::String {
        &mut self.code
    }

    // Take field
    pub fn take_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.code, ::std::string::String::new())
    }

    // string message = 3;


    pub fn get_message(&self) -> &str {
        &self.message
    }
    pub fn clear_message(&mut self) {
        self.message.clear();
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: ::std::string::String) {
        self.message = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut ::std::string::String {
        &mut self.message
    }

    // Take field
    pub fn take_message(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.message, ::std::string::String::new())
    }
}

impl ::protobuf::Message for SetLocaleRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.lang)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.code)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.message)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.lang.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.lang);
        }
        if !self.code.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.code);
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.message);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.lang.is_empty() {
            os.write_string(1, &self.lang)?;
        }
        if !self.code.is_empty() {
            os.write_string(2, &self.code)?;
        }
        if !self.message.is_empty() {
            os.write_string(3, &self.message)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SetLocaleRequest {
        SetLocaleRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "lang",
                |m: &SetLocaleRequest| { &m.lang },
                |m: &mut SetLocaleRequest| { &mut m.lang },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "code",
                |m: &SetLocaleRequest| { &m.code },
                |m: &mut SetLocaleRequest| { &mut m.code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "message",
                |m: &SetLocaleRequest| { &m.message },
                |m: &mut SetLocaleRequest| { &mut m.message },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SetLocaleRequest>(
                "SetLocaleRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SetLocaleRequest {
        static instance: ::protobuf::rt::LazyV2<SetLocaleRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SetLocaleRequest::new)
    }
}

impl ::protobuf::Clear for SetLocaleRequest {
    fn clear(&mut self) {
        self.lang.clear();
        self.code.clear();
        self.message.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SetLocaleRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SetLocaleRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x10protos/nut.proto\x12\tpeony.nut\x1a\x1bgoogle/protobuf/empty.proto\
    \"\xa6\x01\n\x11HeartbeatResponse\x12\x18\n\x07version\x18\x01\x20\x01(\
    \tR\x07version\x12\x1e\n\npostgresql\x18\x02\x20\x01(\tR\npostgresql\x12\
    \x14\n\x05redis\x18\x03\x20\x01(\tR\x05redis\x12\x1a\n\x08rabbitmq\x18\
    \x04\x20\x01(\tR\x08rabbitmq\x12%\n\x0eelastic_search\x18\x05\x20\x01(\t\
    R\relasticSearch\"T\n\x10SetLocaleRequest\x12\x12\n\x04lang\x18\x01\x20\
    \x01(\tR\x04lang\x12\x12\n\x04code\x18\x02\x20\x01(\tR\x04code\x12\x18\n\
    \x07message\x18\x03\x20\x01(\tR\x07message2\x95\x01\n\nNutService\x12C\n\
    \tHeartbeat\x12\x16.google.protobuf.Empty\x1a\x1c.peony.nut.HeartbeatRes\
    ponse\"\0\x12B\n\tSetLocale\x12\x1b.peony.nut.SetLocaleRequest\x1a\x16.g\
    oogle.protobuf.Empty\"\0J\x95\x05\n\x06\x12\x04\0\0\x17\x01\n\x08\n\x01\
    \x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\0\x12\n\t\n\x02\x03\0\
    \x12\x03\x04\0%\n\n\n\x02\x06\0\x12\x04\x06\0\t\x01\n\n\n\x03\x06\0\x01\
    \x12\x03\x06\x08\x12\n\x0b\n\x04\x06\0\x02\0\x12\x03\x07\x02E\n\x0c\n\
    \x05\x06\0\x02\0\x01\x12\x03\x07\x06\x0f\n\x0c\n\x05\x06\0\x02\0\x02\x12\
    \x03\x07\x10%\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\x070A\n\x0b\n\x04\x06\
    \0\x02\x01\x12\x03\x08\x02D\n\x0c\n\x05\x06\0\x02\x01\x01\x12\x03\x08\
    \x06\x0f\n\x0c\n\x05\x06\0\x02\x01\x02\x12\x03\x08\x10\x20\n\x0c\n\x05\
    \x06\0\x02\x01\x03\x12\x03\x08+@\n\n\n\x02\x04\0\x12\x04\x0b\0\x11\x01\n\
    \n\n\x03\x04\0\x01\x12\x03\x0b\x08\x19\n\x0b\n\x04\x04\0\x02\0\x12\x03\
    \x0c\x02\x15\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x0c\x02\x08\n\x0c\n\x05\
    \x04\0\x02\0\x01\x12\x03\x0c\t\x10\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\
    \x0c\x13\x14\n\x0b\n\x04\x04\0\x02\x01\x12\x03\r\x02\x18\n\x0c\n\x05\x04\
    \0\x02\x01\x05\x12\x03\r\x02\x08\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\r\
    \t\x13\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\r\x16\x17\n\x0b\n\x04\x04\0\
    \x02\x02\x12\x03\x0e\x02\x13\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03\x0e\
    \x02\x08\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x0e\t\x0e\n\x0c\n\x05\x04\
    \0\x02\x02\x03\x12\x03\x0e\x11\x12\n\x0b\n\x04\x04\0\x02\x03\x12\x03\x0f\
    \x02\x16\n\x0c\n\x05\x04\0\x02\x03\x05\x12\x03\x0f\x02\x08\n\x0c\n\x05\
    \x04\0\x02\x03\x01\x12\x03\x0f\t\x11\n\x0c\n\x05\x04\0\x02\x03\x03\x12\
    \x03\x0f\x14\x15\n\x0b\n\x04\x04\0\x02\x04\x12\x03\x10\x02\x1c\n\x0c\n\
    \x05\x04\0\x02\x04\x05\x12\x03\x10\x02\x08\n\x0c\n\x05\x04\0\x02\x04\x01\
    \x12\x03\x10\t\x17\n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03\x10\x1a\x1b\n\n\
    \n\x02\x04\x01\x12\x04\x13\0\x17\x01\n\n\n\x03\x04\x01\x01\x12\x03\x13\
    \x08\x18\n\x0b\n\x04\x04\x01\x02\0\x12\x03\x14\x02\x12\n\x0c\n\x05\x04\
    \x01\x02\0\x05\x12\x03\x14\x02\x08\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\
    \x14\t\r\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x14\x10\x11\n\x0b\n\x04\
    \x04\x01\x02\x01\x12\x03\x15\x02\x12\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\
    \x03\x15\x02\x08\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x15\t\r\n\x0c\n\
    \x05\x04\x01\x02\x01\x03\x12\x03\x15\x10\x11\n\x0b\n\x04\x04\x01\x02\x02\
    \x12\x03\x16\x02\x15\n\x0c\n\x05\x04\x01\x02\x02\x05\x12\x03\x16\x02\x08\
    \n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x03\x16\t\x10\n\x0c\n\x05\x04\x01\
    \x02\x02\x03\x12\x03\x16\x13\x14b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
